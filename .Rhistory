library(ggplot2)
library(dplyr)
library(reshape2)
setwd('/Users/orson/Box/bioinfo/HNCa/xl-v2/gatk')
files = list.files()
remotes::install_github("coolbutuseless/devout")
a = norm(10, 1)
a = c(1:5)
b = c(7:3)
plot(a,b)
library(devout)
ascii()
plot(a,b)
invisible(dev.off())
#initial conditions
#velocity constant
k1 <- 0.005
k2 <- 0.0002
k3 <- 0.045
km3a <- 250000 # reference:O2,Km3a&Km3b are in ??M,others are in nM
km3b <- 100000
k4 <- 0.1
km4 <- 150
k5 <- 0.001*0.0005 #k9*k21f
k6f <- 0.001 #k22
k6r <- 0.01
k7 <- 0.00001 #k25
# v8&v9 is the velocity of pVHL catalysis and degradation, which is not shown in the reference.
k10 <- 0.009 #k27
k11 <- 0.0001 #k28
k12 <- 0.002 #k24
k13 <- 0.001*0.01 #k10*k21r
k14 <- 0.0016 #k23
k15 <- 0.00038 #k26
#initial concentration
HIF1a <- 5
O2 <- 100000
HIF1a_pOH <- 0
HIFb <- 170
PHD <- 100
VHL <- 500 # 10 times
HIFd <- 0
HRE <- 50
HIFd_HRE <- 0
mRNA <- 0
EGFP <- 0 # same as protein in reference
dt <- 1 #time interval [unit="s"]
#set loop to simulate the pathway
#set timelength
timesteps <- 500
#set empty vectors to store the variables
s_HIF1a <- numeric(length = timesteps)
s_HIF1a[1] <- HIF1a
s_HIF1a_pOH <- numeric(length = timesteps)
s_HIF1a_pOH[1] <- HIF1a_pOH
s_HIFb <- numeric(length = timesteps)
s_HIFb[1] <- HIFb
s_PHD <- numeric(length = timesteps)
s_PHD[1] <- PHD
s_VHL <- numeric(length = timesteps)
s_VHL[1] <- VHL
s_HIFd <- numeric(length = timesteps)
s_HIFd[1] <- HIFd
s_HRE <- numeric(length = timesteps)
s_HRE[1] <- HRE
s_HIFd_HRE <- numeric(length = timesteps)
s_HIFd_HRE[1] <- HIFd_HRE
s_mRNA <- numeric(length = timesteps)
s_mRNA[1] <- mRNA
s_EGFP <- numeric(length = timesteps)
s_EGFP[1] <- EGFP
#set "for" loop
for (i in c(1:timesteps-1)){
#equation for velocity
v1 <- k1
v2 <- k2*HIF1a
v3 <- k3*PHD*(O2/(km3a+O2))*(HIF1a/(km3b+HIF1a))
v4 <- k4*VHL*(HIF1a_pOH/(km4+HIF1a_pOH))
v5 <- k5*HIF1a*HIFb
v6 <- k6f*HIFd*HRE-k6r*HIFd_HRE
v7 <- k7*PHD
#v8&v9 currently empty
v10 <- k10*mRNA
v11 <- k11*EGFP
v12 <- k12*HIFd_HRE
v13 <- k13*HIFd
v14 <- k14*HIFd_HRE
v15 <- k15*mRNA
#simulate the process
HIF1a <- HIF1a + (v1-v2-v3-v5+v13)*dt
HIF1a_pOH <- HIF1a_pOH + (v3-v4)*dt
HIFb <- HIFb + (v13-v5)*dt
PHD <- PHD + (v12-v7)*dt
VHL <- VHL
HIFd <- HIFd + (v5-v13-v6)*dt
HRE <- HRE + (-v6)*dt
HIFd_HRE <- HIFd_HRE + (v6-v14)*dt
mRNA <- mRNA + (v14-v10-v15)*dt
EGFP <- EGFP + (v10-v11)*dt
s_HIF1a[i+1] <- HIF1a
s_HIF1a_pOH[i+1] <- HIF1a_pOH
s_HIFb[i+1] <- HIFb
s_PHD[i+1] <- PHD
s_VHL[i+1] <- VHL
s_HIFd[i+1] <- HIFd
s_HRE[i+1] <- HRE
s_HIFd_HRE[i+1] <- HIFd_HRE
s_mRNA[i+1] <- mRNA
s_EGFP[i+1] <- EGFP
}
#plot the transition during time
time <- seq(0, by=dt,length.out = timesteps)
plot(time,s_EGFP,col ="blue", type = "l")
plot(time,s_HIF1a,col="grey", type = "l")
plot(time,s_HIFd,col="red", type = "l")
#additional: create a dataframe
k11 <- 0.001 #k28
#initial concentration
HIF1a <- 5
O2 <- 100000
HIF1a_pOH <- 0
HIFb <- 170
PHD <- 100
VHL <- 500 # 10 times
HIFd <- 0
HRE <- 50
HIFd_HRE <- 0
mRNA <- 0
EGFP <- 0 # same as protein in reference
dt <- 1 #time interval [unit="s"]
#set loop to simulate the pathway
#set timelength
timesteps <- 500
#set empty vectors to store the variables
s_HIF1a <- numeric(length = timesteps)
s_HIF1a[1] <- HIF1a
s_HIF1a_pOH <- numeric(length = timesteps)
s_HIF1a_pOH[1] <- HIF1a_pOH
s_HIFb <- numeric(length = timesteps)
s_HIFb[1] <- HIFb
s_PHD <- numeric(length = timesteps)
s_PHD[1] <- PHD
s_VHL <- numeric(length = timesteps)
s_VHL[1] <- VHL
s_HIFd <- numeric(length = timesteps)
s_HIFd[1] <- HIFd
s_HRE <- numeric(length = timesteps)
s_HRE[1] <- HRE
s_HIFd_HRE <- numeric(length = timesteps)
s_HIFd_HRE[1] <- HIFd_HRE
s_mRNA <- numeric(length = timesteps)
s_mRNA[1] <- mRNA
s_EGFP <- numeric(length = timesteps)
s_EGFP[1] <- EGFP
#set "for" loop
for (i in c(1:timesteps-1)){
#equation for velocity
v1 <- k1
v2 <- k2*HIF1a
v3 <- k3*PHD*(O2/(km3a+O2))*(HIF1a/(km3b+HIF1a))
v4 <- k4*VHL*(HIF1a_pOH/(km4+HIF1a_pOH))
v5 <- k5*HIF1a*HIFb
v6 <- k6f*HIFd*HRE-k6r*HIFd_HRE
v7 <- k7*PHD
#v8&v9 currently empty
v10 <- k10*mRNA
v11 <- k11*EGFP
v12 <- k12*HIFd_HRE
v13 <- k13*HIFd
v14 <- k14*HIFd_HRE
v15 <- k15*mRNA
#simulate the process
HIF1a <- HIF1a + (v1-v2-v3-v5+v13)*dt
HIF1a_pOH <- HIF1a_pOH + (v3-v4)*dt
HIFb <- HIFb + (v13-v5)*dt
PHD <- PHD + (v12-v7)*dt
VHL <- VHL
HIFd <- HIFd + (v5-v13-v6)*dt
HRE <- HRE + (-v6)*dt
HIFd_HRE <- HIFd_HRE + (v6-v14)*dt
mRNA <- mRNA + (v14-v10-v15)*dt
EGFP <- EGFP + (v10-v11)*dt
s_HIF1a[i+1] <- HIF1a
s_HIF1a_pOH[i+1] <- HIF1a_pOH
s_HIFb[i+1] <- HIFb
s_PHD[i+1] <- PHD
s_VHL[i+1] <- VHL
s_HIFd[i+1] <- HIFd
s_HRE[i+1] <- HRE
s_HIFd_HRE[i+1] <- HIFd_HRE
s_mRNA[i+1] <- mRNA
s_EGFP[i+1] <- EGFP
}
#plot the transition during time
time <- seq(0, by=dt,length.out = timesteps)
plot(time,s_EGFP,col ="blue", type = "l")
plot(time,s_HIF1a,col="grey", type = "l")
plot(time,s_HIFd,col="red", type = "l")
k11 <- 0.1 #k28
#initial concentration
HIF1a <- 5
O2 <- 100000
HIF1a_pOH <- 0
HIFb <- 170
PHD <- 100
VHL <- 500 # 10 times
HIFd <- 0
HRE <- 50
HIFd_HRE <- 0
mRNA <- 0
EGFP <- 0 # same as protein in reference
dt <- 1 #time interval [unit="s"]
#set loop to simulate the pathway
#set timelength
timesteps <- 500
#set empty vectors to store the variables
s_HIF1a <- numeric(length = timesteps)
s_HIF1a[1] <- HIF1a
s_HIF1a_pOH <- numeric(length = timesteps)
s_HIF1a_pOH[1] <- HIF1a_pOH
s_HIFb <- numeric(length = timesteps)
s_HIFb[1] <- HIFb
s_PHD <- numeric(length = timesteps)
s_PHD[1] <- PHD
s_VHL <- numeric(length = timesteps)
s_VHL[1] <- VHL
s_HIFd <- numeric(length = timesteps)
s_HIFd[1] <- HIFd
s_HRE <- numeric(length = timesteps)
s_HRE[1] <- HRE
s_HIFd_HRE <- numeric(length = timesteps)
s_HIFd_HRE[1] <- HIFd_HRE
s_mRNA <- numeric(length = timesteps)
s_mRNA[1] <- mRNA
s_EGFP <- numeric(length = timesteps)
s_EGFP[1] <- EGFP
#set "for" loop
for (i in c(1:timesteps-1)){
#equation for velocity
v1 <- k1
v2 <- k2*HIF1a
v3 <- k3*PHD*(O2/(km3a+O2))*(HIF1a/(km3b+HIF1a))
v4 <- k4*VHL*(HIF1a_pOH/(km4+HIF1a_pOH))
v5 <- k5*HIF1a*HIFb
v6 <- k6f*HIFd*HRE-k6r*HIFd_HRE
v7 <- k7*PHD
#v8&v9 currently empty
v10 <- k10*mRNA
v11 <- k11*EGFP
v12 <- k12*HIFd_HRE
v13 <- k13*HIFd
v14 <- k14*HIFd_HRE
v15 <- k15*mRNA
#simulate the process
HIF1a <- HIF1a + (v1-v2-v3-v5+v13)*dt
HIF1a_pOH <- HIF1a_pOH + (v3-v4)*dt
HIFb <- HIFb + (v13-v5)*dt
PHD <- PHD + (v12-v7)*dt
VHL <- VHL
HIFd <- HIFd + (v5-v13-v6)*dt
HRE <- HRE + (-v6)*dt
HIFd_HRE <- HIFd_HRE + (v6-v14)*dt
mRNA <- mRNA + (v14-v10-v15)*dt
EGFP <- EGFP + (v10-v11)*dt
s_HIF1a[i+1] <- HIF1a
s_HIF1a_pOH[i+1] <- HIF1a_pOH
s_HIFb[i+1] <- HIFb
s_PHD[i+1] <- PHD
s_VHL[i+1] <- VHL
s_HIFd[i+1] <- HIFd
s_HRE[i+1] <- HRE
s_HIFd_HRE[i+1] <- HIFd_HRE
s_mRNA[i+1] <- mRNA
s_EGFP[i+1] <- EGFP
}
#plot the transition during time
time <- seq(0, by=dt,length.out = timesteps)
plot(time,s_EGFP,col ="blue", type = "l")
plot(time,s_HIF1a,col="grey", type = "l")
plot(time,s_HIFd,col="red", type = "l")
library(tidyverse)
library(reshape2)
library(ggplot2)
library(ggrepel)
library(patchwork)
# set workspace
setwd('/Users/orson/Documents/bioinfo/Covid19-CCLE')
rm(list=ls())
# import cell line info
cell.info = read.csv('CCLE_data/cell_line_info/CCLE_info.csv', stringsAsFactors = F)
head(cell.info)
# dissect out the info
colnames(cell.info)
df.info = cell.info[,c(1,2,5,6,9)]
head(df.info)
# import datasets
gene = c('ace2', 'tmprss2', 'tmprss4')
quant = c('Affy', 'RNAseq')
# collect dataframe of Affy and RNAseq
df.ac = data.frame()
for (g in gene){
for (q in quant){
df = read.csv(paste0('CCLE_data/dataset/', q, '_', g,'.csv'), header = T)
assay = rep(q, nrow(df))
gn = rep(g, nrow(df))
df = cbind(df, assay, gn)
colnames(df) = c('CCLE.name','expr','assay','gene')
df.ac = rbind(df.ac, df)
}
}
head(df.ac)
# dcast dataframe
df.ac$expr = df.ac$expr %>% as.numeric()
class(df.ac$exp)
df.dc = dcast(df.ac, formula = CCLE.name + assay ~ gene, value.var = 'expr')
head(df.dc)
# dissect dfaffy and dfrna
df.affy = df.dc[which(df.dc$assay=='Affy'),c(1,3:5)] %>% na.omit()
rownames(df.affy) = NULL
head(df.affy)
df.rnaseq = df.dc[which(df.dc$assay=='RNAseq'),c(1,3:5)] %>% na.omit()
rownames(df.rnaseq) = NULL
head(df.rnaseq)
## start with df.rna
# merge cell info into df.rna
df.rnaseq = merge(df.affy, df.info)
head(df.rnaseq)
# 2^ normalization
# df.2 = 2^df.rnaseq[,2:4]
df.2 = df.rnaseq[,2:4]
rownames(df.2) = make.names(df.rnaseq$CCLE.name, unique = TRUE)
head(df.2)
# test out the score with assumed a
b = mean(df.2$tmprss2)/10
a = 0.5
FUN = function(x){x[1] * (x[2] + a*x[3] + b)}
df.sc = apply(df.2, 1, FUN)
df = df.sc
df = data.frame(score = df, cell.line = df.rnaseq$Cell.line.primary.name, tissue = df.rnaseq$Site.Primary, source = df.rnaseq$Source) %>% na.omit()
index.ord = order(df$score, decreasing = TRUE)
df.ord = df[index.ord,]
label.cell = rep('', nrow(df))
label.tissue = rep(NA, nrow(df))
label.source = rep(NA, nrow(df))
n = 30
label.cell[1:n] = df.ord$cell.line[1:n] %>% as.character()
label.tissue[1:n] = df.ord$tissue[1:n] %>% as.character()
label.source[1:n] = df.ord$source[1:n] %>% as.character()
ggplot(data = df.ord, aes(x = cell.line, y = log(score),
color = label.tissue,
label = label.cell)) +
facet_grid(cols = vars(source)) +
geom_point(size = 1, alpha = 0.7) +
labs(title = paste0('alpha = ',a),
x = 'cell lines', y = 'Log2(score)', color = 'tissue') +
geom_text_repel(show.legend = FALSE,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
jpeg(filename = paste0('Affy_score_source_log',a,'.jpg'), width = 24, height = 8, units = 'in', res = 300)
ggplot(data = df.ord, aes(x = cell.line, y = log(score),
color = label.tissue,
label = label.cell)) +
facet_grid(cols = vars(source)) +
geom_point(size = 1, alpha = 0.7) +
labs(title = paste0('alpha = ',a),
x = 'cell lines', y = 'Log2(score)', color = 'tissue') +
geom_text_repel(show.legend = FALSE,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
dev.off()
alist = (1:100)/100
b = mean(df.2$tmprss2)/10
a = 0.5
df.sc.ac = data.frame(cell.line = df.rnaseq$Cell.line.primary.name,
tissue = df.rnaseq$Site.Primary)
head(df.sc.ac)
for (a in alist){
print(a)
FUN = function(x){x[1] * (x[2] + a*x[3] + b)}
arr = apply(df.2, 1, FUN)
df.sc.ac = cbind(df.sc.ac, arr)
}
rownames(df.sc.ac) = NULL
dim(df.sc.ac)
head(df.sc.ac)
df.sc.ac = df.sc.ac %>% na.omit()
df.ar = t(df.sc.ac[,-c(1:2)])
colnames(df.ar) = df.sc.ac$cell.line
rownames(df.ar) = c(1:100)/100
head(df.ar)
stat.mean = apply(df.ar, 2, mean)
index.stat = order(stat.mean, decreasing = TRUE)
df.sc.ac.od = df.sc.ac[index.stat,1:2]
df.od.final = cbind(df.sc.ac.od,
source = df.rnaseq$Source[index.stat],
avg.score  = stat.mean[index.stat])
write.csv(df.od.final, file = 'Affy_Score_in_order.csv' ,row.names = F)
